diff --git a/node_modules/@config-plugins/tv/build/utils.js b/node_modules/@config-plugins/tv/build/utils.js
index 63257eb..e352952 100644
--- a/node_modules/@config-plugins/tv/build/utils.js
+++ b/node_modules/@config-plugins/tv/build/utils.js
@@ -1,7 +1,6 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.showVerboseWarnings = exports.isTVEnabled = void 0;
-// @ts-expect-error
 const getenv_1 = require("getenv");
 class Env {
     /** Enable prebuild for TV */
diff --git a/node_modules/@config-plugins/tv/build/withTV.js b/node_modules/@config-plugins/tv/build/withTV.js
index 1a2661b..2bde24a 100644
--- a/node_modules/@config-plugins/tv/build/withTV.js
+++ b/node_modules/@config-plugins/tv/build/withTV.js
@@ -1,6 +1,7 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 const config_plugins_1 = require("expo/config-plugins");
+const withTVAndroidManifest_1 = require("./withTVAndroidManifest");
 const withTVPodfile_1 = require("./withTVPodfile");
 const withTVSplashScreen_1 = require("./withTVSplashScreen");
 const withTVXcodeProject_1 = require("./withTVXcodeProject");
@@ -8,6 +9,7 @@ const withTVPlugin = (config, params = {}) => {
     config = (0, withTVXcodeProject_1.withTVXcodeProject)(config, params);
     config = (0, withTVPodfile_1.withTVPodfile)(config, params);
     config = (0, withTVSplashScreen_1.withTVSplashScreen)(config, params);
+    config = (0, withTVAndroidManifest_1.withTVAndroidManifest)(config, params);
     return config;
 };
 const pkg = require("../package.json");
diff --git a/node_modules/@config-plugins/tv/build/withTVAndroidManifest.d.ts b/node_modules/@config-plugins/tv/build/withTVAndroidManifest.d.ts
new file mode 100644
index 0000000..21c61c6
--- /dev/null
+++ b/node_modules/@config-plugins/tv/build/withTVAndroidManifest.d.ts
@@ -0,0 +1,3 @@
+import { ConfigPlugin } from "expo/config-plugins";
+import { ConfigData } from "./types";
+export declare const withTVAndroidManifest: ConfigPlugin<ConfigData>;
diff --git a/node_modules/@config-plugins/tv/build/withTVAndroidManifest.js b/node_modules/@config-plugins/tv/build/withTVAndroidManifest.js
new file mode 100644
index 0000000..d2f2426
--- /dev/null
+++ b/node_modules/@config-plugins/tv/build/withTVAndroidManifest.js
@@ -0,0 +1,56 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.withTVAndroidManifest = void 0;
+const config_plugins_1 = require("expo/config-plugins");
+const utils_1 = require("./utils");
+const pkg = require("../package.json");
+const { getMainActivity } = config_plugins_1.AndroidConfig.Manifest;
+const withTVAndroidManifest = (config, params = {}) => {
+    const isTV = (0, utils_1.isTVEnabled)(params);
+    const verbose = (0, utils_1.showVerboseWarnings)(params);
+    return (0, config_plugins_1.withAndroidManifest)(config, async (config) => {
+        if (isTV) {
+            if (verbose) {
+                config_plugins_1.WarningAggregator.addWarningAndroid("manifest", `${pkg.name}@${pkg.version}: modifying AndroidManifest.xml for TV`);
+            }
+            config.modResults = await setLeanBackLauncherIntent(config, config.modResults, params);
+            config.modResults = await removePortrait(config, config.modResults, params);
+        }
+        return config;
+    });
+};
+exports.withTVAndroidManifest = withTVAndroidManifest;
+async function setLeanBackLauncherIntent(_config, androidManifest, params) {
+    const isTV = (0, utils_1.isTVEnabled)(params);
+    const verbose = (0, utils_1.showVerboseWarnings)(params);
+    if (isTV) {
+        if (verbose) {
+            config_plugins_1.WarningAggregator.addWarningAndroid("manifest", `${pkg.name}@${pkg.version}: adding TV launcher to AndroidManifest.xml`);
+        }
+    }
+    const mainActivity = getMainActivity(androidManifest);
+    const intentFilters = mainActivity?.["intent-filter"];
+    intentFilters?.length &&
+        intentFilters?.[0].category?.length &&
+        intentFilters?.[0].category.push({
+            $: {
+                "android:name": "android.intent.category.LEANBACK_LAUNCHER",
+            },
+        });
+    return androidManifest;
+}
+async function removePortrait(config, androidManifest, params) {
+    const isTV = (0, utils_1.isTVEnabled)(params);
+    const verbose = (0, utils_1.showVerboseWarnings)(params);
+    const mainActivity = getMainActivity(androidManifest);
+    if (mainActivity?.$) {
+        const metadata = mainActivity?.$ ?? {};
+        if (metadata["android:screenOrientation"] && isTV) {
+            if (verbose) {
+                config_plugins_1.WarningAggregator.addWarningAndroid("manifest", `${pkg.name}@${pkg.version}: removing screen orientation from AndroidManifest.xml`);
+            }
+            delete metadata["android:screenOrientation"];
+        }
+    }
+    return androidManifest;
+}
